buildscript {
	dependencies {
		classpath "org.kohsuke:github-api:${project.github_api}"
		classpath "com.guardsquare:proguard-gradle:${project.proguard_gradle}"
	}
}

plugins {
	id 'java'
	id 'java-library'
	id 'eclipse'
	id 'org.quiltmc.gradle.licenser' version '2.0.1'
}

sourceCompatibility = targetCompatibility = JavaVersion.VERSION_1_8

archivesBaseName = "fable"
version = project.fable
def ENV = System.getenv()

allprojects {
	apply plugin: 'java-library'
	apply plugin: 'eclipse'

	if (ENV.SNAPSHOTS_URL) {
		version = version + "-SNAPSHOT"
	}
	if (!ENV.GITHUB_ACTIONS) {
		version = version + "+local"
	}

	repositories {
		maven {
			name = 'Fabric'
			url = 'https://maven.fabricmc.net/'
		}
		maven {
			name = 'Quilt'
			url = 'https://maven.quiltmc.org/repository/release'
		}
		maven {
			name = 'Quilt'
			url = 'https://maven.quiltmc.org/repository/snapshot'
		}
		maven {
		  name = 'Unascribed'
		  url = 'https://repo.sleeping.town/'
		}
		mavenCentral() {
			content {
				excludeGroupByRegex "org.ow2.asm"
			}
		}
	}
	java {
		toolchain {
			languageVersion = JavaLanguageVersion.of(17)
		}
	}
}

sourceSets {
	main {
		java.srcDirs = ['src/main/java', 'src/fabric/api/java', 'src/fabric/impl/java', 'src/fabric/legacy/java']
	}
}

configurations {
	include {
	   transitive = false
	}

	implementation {
		extendsFrom include
	}

	development {
		transitive = false
	}

	api {
		extendsFrom development
	}
}

dependencies {
	// Non-"include"d dependencies must be added to the LoaderLibrary class as well.
	api "org.ow2.asm:asm:${project.asm}"
	api "org.ow2.asm:asm-analysis:${project.asm}"
	api "org.ow2.asm:asm-commons:${project.asm}"
	api "org.ow2.asm:asm-tree:${project.asm}"
	api "org.ow2.asm:asm-util:${project.asm}"

	api("net.fabricmc:sponge-mixin:${project.sponge_mixin}") {
		exclude module: 'launchwrapper'
		exclude module: 'guava'
	}
	api "net.fabricmc:tiny-mappings-parser:${project.tiny_mappings_parser}"
	api "net.fabricmc:tiny-remapper:${project.tiny_remapper}"
	api "net.fabricmc:access-widener:${project.access_widener}"

	/*include*/ api "org.quiltmc:quilt-json5:${project.quilt_json5}"
	include "org.quiltmc:quilt-loader-sat4j:${project.quilt_loader_sat4j}"

	include "org.quiltmc.quilt-config.serializers:toml:${project.quilt_config}"
	include "org.quiltmc.quilt-config.serializers:json5:${project.quilt_config}"
	api "org.quiltmc:quilt-config:${project.quilt_config}"

	include "com.electronwill.night-config:core:${project.night_config}"
	include "com.electronwill.night-config:toml:${project.night_config}"
	// shadow "com.electronwill.night-config:core:${project.night_config}"
	// shadow "com.electronwill.night-config:toml:${project.night_config}"

	development "io.github.llamalad7:mixinextras-fabric:$mixin_extras"

	// also must update in minecraft AND minecraft test
	compileOnly "org.quiltmc.chasm:chasm:${project.quilt_chasm}"
	compileOnly "org.quiltmc.chasm:chassembly:${project.quilt_chasm}"

	// shadow "org.quiltmc.quilt-config.serializers:toml:${project.quilt_config}"
	// shadow "org.quiltmc.quilt-config.serializers:json5:${project.quilt_config}"
	// shadow "org.quiltmc.parsers:json:${project.quilt_parsers}"
	include "org.quiltmc.parsers:json:${project.quilt_parsers}"
	include "com.unascribed:flexver-java:${project.flexver}"
	// shadow "com.unascribed:flexver-java:${project.flexver}"

	testCompileOnly "org.jetbrains:annotations:${project.annotations}"
}

processResources {
	inputs.property "version", project.version
	inputs.property "tiny_mappings_parser", project.tiny_mappings_parser
	inputs.property "sponge_mixin", project.sponge_mixin
	inputs.property "tiny_remapper", project.tiny_remapper
	inputs.property "access_widener", project.access_widener
	inputs.property "quilt_json5", project.quilt_json5
	inputs.property "asm", project.asm
	inputs.property "asm_analysis", project.asm
	inputs.property "asm_commons", project.asm
	inputs.property "asm_tree", project.asm
	inputs.property "asm_util", project.asm
	inputs.property "quilt_config", project.quilt_config
	inputs.property "mixin_extras", project.mixin_extras

	filesMatching("quilt.mod.json") {
		expand "version": project.version
	}

	filesMatching(["quilt_installer.json", "fabric-installer.launchwrapper.json"]) {
		expand(
			"tiny_mappings_parser": project.tiny_mappings_parser,
			"sponge_mixin": project.sponge_mixin,
			"tiny_remapper": project.tiny_remapper,
			"access_widener": project.access_widener,
			"quilt_json5": project.quilt_json5,
			"asm": project.asm,
			"asm_analysis": project.asm,
			"asm_commons": project.asm,
			"asm_tree": project.asm,
			"asm_util": project.asm,
			"quilt_config": project.quilt_config,
			"mixin_extras": project.mixin_extras,
		)
	}
}

java {
	sourceCompatibility = 8
	targetCompatibility = 8
	withSourcesJar()
}

compileJava {
	options.release.set(8)
}

jar {
	enabled = false
	// Set the classifier to fix gradle task validation confusion.
	archiveClassifier = "disabled"
}

// Renaming in the shadow jar task doesnt seem to work, so do it here
task getSat4jAbout(type: Copy) {
	dependsOn project.configurations.include
	duplicatesStrategy = DuplicatesStrategy.EXCLUDE

	from {
		configurations.include.collect {
			zipTree(it).matching {
				include 'about.html'
			}
		}
	}

	rename 'about.html', 'org/quiltmc/loader/impl/lib/sat4j/about-sat4j.html'

	into layout.buildDirectory.dir("sat4j")
}

tasks.withType(AbstractArchiveTask) {
	preserveFileTimestamps = false
	reproducibleFileOrder = true
}

task copyJson() {
	def inJson = file('build/resources/main/quilt_installer.json')
	//def inLwJson = file('src/main/resources/fabric-installer.launchwrapper.json')

	def outJson = file("build/libs/${archivesBaseName}-${version}.json")
	//def outLwJson = file("build/libs/${archivesBaseName}-${version}.launchwrapper.json")

	inputs.files (inJson, /*inLwJson*/)
	outputs.files(outJson, /*outLwJson*/)

	doLast {
		outJson.text = inJson.text
		//outLwJson.text = inLwJson.text
	}
}
tasks.copyJson.dependsOn "processResources"
tasks.build.dependsOn "copyJson"

tasks.withType(JavaCompile).configureEach {
	it.options.encoding = "UTF-8"

	// Target JDK 8
	if (JavaVersion.current().isJava9Compatible()) {
		it.options.release.set(8)
	}
}
