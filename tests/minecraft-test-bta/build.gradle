plugins {
	id 'babric-loom' version '1.5-SNAPSHOT'
	id 'org.quiltmc.gradle.licenser' version '2.0.1'
}

license {
	rule project.rootProject.file("codeformat/FABRIC_MODIFIED_HEADER")
	rule project.rootProject.file("codeformat/QUILT_MODIFIED_HEADER")
	rule project.rootProject.file("codeformat/HEADER")

	include '**/*.java'
	exclude '**/lib/gson/*.java'
}

sourceCompatibility = targetCompatibility = JavaVersion.VERSION_1_8

loom {
	// FIXME: We have to use clientOnlyMinecraftJar instead of the Babric-provided gluedMinecraftJar; why? It's broken.
	//gluedMinecraftJar()
	clientOnlyMinecraftJar()
	noIntermediateMappings()
	customMinecraftManifest.set("https://github.com/Turnip-Labs/bta-manifest-repo/releases/download/v${project.bta_version}/${project.bta_version}.json")
	runConfigs.configureEach {
		ideConfigGenerated = true
	}
}

dependencies {
	minecraft "bta-download-repo:bta:${project.bta_version}"
	mappings loom.layered() {}
	modRuntimeOnly "objects:client:43db9b498cb67058d2e12d394e6507722e71bb45" // https://piston-data.mojang.com/v1/objects/43db9b498cb67058d2e12d394e6507722e71bb45/client.jar

	implementation project(":loader")
	implementation project(":packages:minecraft-bta")
	//noinspection DependencyNotationArgument
	implementation project(":packages:minecraft-bta").sourceSets.main.output
	//noinspection DependencyNotationArgument
	implementation project(":loader").sourceSets.main.output

	// Provided for runtime.
	implementation "org.quiltmc.chasm:chassembly:${project.quilt_chasm}"
	implementation "org.quiltmc.chasm:chasm:${project.quilt_chasm}"

	// Required for Mixins annotation processor.
	annotationProcessor "org.ow2.asm:asm:${project.asm}"
	annotationProcessor "org.ow2.asm:asm-analysis:${project.asm}"
	annotationProcessor "org.ow2.asm:asm-commons:${project.asm}"
	annotationProcessor "org.ow2.asm:asm-tree:${project.asm}"
	annotationProcessor "org.ow2.asm:asm-util:${project.asm}"

	annotationProcessor ("net.fabricmc:sponge-mixin:${project.sponge_mixin}") {
		exclude module: 'launchwrapper'
		exclude module: 'guava'
	}

	implementation "org.slf4j:slf4j-api:1.8.0-beta4"
	implementation "org.apache.logging.log4j:log4j-slf4j18-impl:2.16.0"

	var log4jVersion = "2.20.0"
	implementation("org.apache.logging.log4j:log4j-core:${log4jVersion}")
	implementation("org.apache.logging.log4j:log4j-api:${log4jVersion}")
	implementation("org.apache.logging.log4j:log4j-1.2-api:${log4jVersion}")

	include(implementation("org.apache.commons:commons-lang3:3.12.0"))

	modImplementation "ModMenu:ModMenu:2.0.4"
	implementation 'com.google.guava:guava:33.0.0-jre'
	implementation group: 'com.google.code.gson', name: 'gson', version: '2.10.1'
}

tasks.withType(JavaCompile).configureEach {
	it.options.encoding = "UTF-8"
	it.options.release.set(8)
}
